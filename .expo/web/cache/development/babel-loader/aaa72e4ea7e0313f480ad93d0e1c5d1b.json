{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nimport LoginPage from \"./Pages/Login\";\nimport ForgetPass from \"./Pages/ForgetPass\";\nimport Verification from \"./Pages/Verification\";\nimport NewPass from \"./Pages/NewPass\";\nimport OpenProject from \"./Pages/OpenProject\";\nimport Bearing from \"./Pages/Bearing\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar getFonts = function getFonts() {\n  return Font.loadAsync({\n    calibri: require(\"./assets/fonts/calibri.ttf\")\n  });\n};\n\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontLoading = _useState2[0],\n      setFontLoading = _useState2[1];\n\n  if (fontLoading) {\n    return _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        children: [_jsx(Stack.Screen, {\n          name: \"OpenProject\",\n          component: OpenProject,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"Bearing\",\n          component: Bearing,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"LoginPage\",\n          component: LoginPage\n        }), _jsx(Stack.Screen, {\n          name: \"ForgetPass\",\n          component: ForgetPass\n        }), _jsx(Stack.Screen, {\n          name: \"Verification\",\n          component: Verification\n        }), _jsx(Stack.Screen, {\n          name: \"NewPass\",\n          component: NewPass\n        })]\n      })\n    });\n  } else {\n    return _jsx(AppLoading, {\n      startAsync: getFonts,\n      onFinish: function onFinish() {\n        return setFontLoading(true);\n      }\n    });\n  }\n}","map":{"version":3,"names":["React","useState","NavigationContainer","createNativeStackNavigator","AppLoading","Font","LoginPage","ForgetPass","Verification","NewPass","OpenProject","Bearing","getFonts","loadAsync","calibri","require","Stack","App","fontLoading","setFontLoading","headerShown"],"sources":["E:/Hoogaman/E-novation-Front-End/App.js"],"sourcesContent":["\r\nimport React,{ useState } from 'react';\r\n\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport AppLoading from 'expo-app-loading';\r\nimport * as Font from 'expo-font';\r\n\r\nimport LoginPage from './Pages/Login';\r\nimport ForgetPass from './Pages/ForgetPass';\r\nimport Verification from './Pages/Verification'\r\nimport NewPass from './Pages/NewPass'\r\nimport OpenProject from './Pages/OpenProject'\r\nimport Bearing from './Pages/Bearing'\r\nconst getFonts = () => {\r\n  return Font.loadAsync({\r\n    calibri: require(\"./assets/fonts/calibri.ttf\"),\r\n    \r\n  })\r\n}\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\n// const config = {\r\n//   animation: 'spring',\r\n//   config: {\r\n//     stiffness: 1000,\r\n//     damping: 500,\r\n//     mass: 3,\r\n//     overshootClamping: false,\r\n//     restDisplacementThreshold: 0.01,\r\n//     restSpeedThreshold: 0.01,\r\n//   },\r\n// };\r\n// const closeConfig = {\r\n//   animation:'timing',\r\n//   config: {\r\n//     duration:500,\r\n//     easing:Easing.linear\r\n//   }\r\n// }\r\nexport default function App() {\r\nconst [fontLoading, setFontLoading] = useState(false);\r\nif (fontLoading){\r\n  return (\r\n    <NavigationContainer>\r\n    <Stack.Navigator\r\n    // screenOptions={{gestureEnabled:true, gestsureDirection: 'horizontal', transitionSpec:{open: config, close: config}}}\r\n    \r\n        >\r\n      <Stack.Screen name=\"OpenProject\" component={OpenProject} options={{  headerShown: false,  }} />\r\n      <Stack.Screen name=\"Bearing\" component={Bearing} options={{ headerShown: false }}/>      \r\n      <Stack.Screen name=\"LoginPage\" component={LoginPage} />\r\n      <Stack.Screen name=\"ForgetPass\" component={ForgetPass} />\r\n      <Stack.Screen name=\"Verification\" component={Verification} />\r\n      <Stack.Screen name=\"NewPass\" component={NewPass} />\r\n    </Stack.Navigator>\r\n  </NavigationContainer>\r\n  );\r\n} else {\r\n  return (\r\n    <AppLoading\r\n      startAsync={getFonts}\r\n      onFinish= {() => setFontLoading(true)}\r\n    />\r\n  );\r\n}\r\n\r\n  \r\n}\r\n"],"mappings":";AACA,OAAOA,KAAP,IAAeC,QAAf,QAA+B,OAA/B;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,OAAOC,SAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP;AACA,OAAOC,OAAP;AACA,OAAOC,WAAP;AACA,OAAOC,OAAP;;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;EACrB,OAAOP,IAAI,CAACQ,SAAL,CAAe;IACpBC,OAAO,EAAEC,OAAO;EADI,CAAf,CAAP;AAID,CALD;;AAOA,IAAMC,KAAK,GAAGb,0BAA0B,EAAxC;AAoBA,eAAe,SAASc,GAAT,GAAe;EAC9B,gBAAsChB,QAAQ,CAAC,KAAD,CAA9C;EAAA;EAAA,IAAOiB,WAAP;EAAA,IAAoBC,cAApB;;EACA,IAAID,WAAJ,EAAgB;IACd,OACE,KAAC,mBAAD;MAAA,UACA,MAAC,KAAD,CAAO,SAAP;QAAA,WAIE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,aAAnB;UAAiC,SAAS,EAAER,WAA5C;UAAyD,OAAO,EAAE;YAAGU,WAAW,EAAE;UAAhB;QAAlE,EAJF,EAKE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,SAAnB;UAA6B,SAAS,EAAET,OAAxC;UAAiD,OAAO,EAAE;YAAES,WAAW,EAAE;UAAf;QAA1D,EALF,EAME,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,WAAnB;UAA+B,SAAS,EAAEd;QAA1C,EANF,EAOE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,YAAnB;UAAgC,SAAS,EAAEC;QAA3C,EAPF,EAQE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,cAAnB;UAAkC,SAAS,EAAEC;QAA7C,EARF,EASE,KAAC,KAAD,CAAO,MAAP;UAAc,IAAI,EAAC,SAAnB;UAA6B,SAAS,EAAEC;QAAxC,EATF;MAAA;IADA,EADF;EAeD,CAhBD,MAgBO;IACL,OACE,KAAC,UAAD;MACE,UAAU,EAAEG,QADd;MAEE,QAAQ,EAAG;QAAA,OAAMO,cAAc,CAAC,IAAD,CAApB;MAAA;IAFb,EADF;EAMD;AAGA"},"metadata":{},"sourceType":"module"}