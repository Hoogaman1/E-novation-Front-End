{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar SCREEN_WIDTH = width;\nvar SCREEN_HEIGHT = height;\n\nvar ResponsiveScreen = function () {\n  function ResponsiveScreen() {\n    _classCallCheck(this, ResponsiveScreen);\n  }\n\n  _createClass(ResponsiveScreen, null, [{\n    key: \"init\",\n    value: function init(width, height) {\n      this.wscale = SCREEN_WIDTH / width;\n      this.hscale = SCREEN_HEIGHT / height;\n    }\n  }]);\n\n  return ResponsiveScreen;\n}();\n\nResponsiveScreen.wscale = 414;\nResponsiveScreen.hscale = 852;\n\nResponsiveScreen.normalize = function (size, based) {\n  if (ResponsiveScreen.hscale && ResponsiveScreen.wscale) {\n    var newSize = based === 'height' ? size * ResponsiveScreen.hscale : size * ResponsiveScreen.wscale;\n\n    if (Platform.OS === 'ios') {\n      return Math.round(PixelRatio.roundToNearestPixel(newSize));\n    } else {\n      return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n    }\n  }\n\n  return size;\n};\n\nResponsiveScreen.fontSize = function (size, based) {\n  if (ResponsiveScreen.hscale && ResponsiveScreen.wscale) {\n    var newSize = based === 'height' ? size * ResponsiveScreen.hscale : size * ResponsiveScreen.wscale;\n\n    if (Platform.OS === 'ios') {\n      return Math.round(PixelRatio.roundToNearestPixel(newSize));\n    } else {\n      return Math.round(PixelRatio.roundToNearestPixel(newSize));\n    }\n  }\n\n  return size;\n};\n\nexport default ResponsiveScreen;","map":{"version":3,"names":["Dimensions","get","width","height","SCREEN_WIDTH","SCREEN_HEIGHT","ResponsiveScreen","wscale","hscale","normalize","size","based","newSize","Platform","OS","Math","round","PixelRatio","roundToNearestPixel","fontSize"],"sources":["/home/arowanax/Documents/Hoogaman/e-novation/native/front/E-novation-Front-End/node_modules/react-native-auto-responsive-screen/index.ts"],"sourcesContent":["import { Dimensions, Platform, PixelRatio } from 'react-native'\nconst { width, height } = Dimensions.get('window')\nconst SCREEN_WIDTH = width\nconst SCREEN_HEIGHT = height\n\nclass ResponsiveScreen {\n  static wscale: number = 414\n  static hscale: number =  852\n\n  static init(width: number, height: number) {\n    this.wscale = SCREEN_WIDTH / width\n    this.hscale = SCREEN_HEIGHT / height\n  }\n\n  static normalize = (size: number, based: string) => {\n    if (ResponsiveScreen.hscale && ResponsiveScreen.wscale) {\n      const newSize =\n        based === 'height'\n          ? size * ResponsiveScreen.hscale\n          : size * ResponsiveScreen.wscale\n      if (Platform.OS === 'ios') {\n        return Math.round(PixelRatio.roundToNearestPixel(newSize))\n      } else {\n        return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n      }\n    }\n    return size\n  }\n\n  static fontSize = (size: number, based: string) => {\n    if (ResponsiveScreen.hscale && ResponsiveScreen.wscale) {\n      const newSize =\n        based === 'height'\n          ? size * ResponsiveScreen.hscale\n          : size * ResponsiveScreen.wscale\n      if (Platform.OS === 'ios') {\n        return Math.round(PixelRatio.roundToNearestPixel(newSize))\n      } else {\n        return Math.round(PixelRatio.roundToNearestPixel(newSize))\n      }\n    }\n    return size\n  }\n}\n\nexport default ResponsiveScreen\n"],"mappings":";;;;;;AACA,sBAA0BA,UAAU,CAACC,GAAX,CAAe,QAAf,CAA1B;AAAA,IAAQC,KAAR,mBAAQA,KAAR;AAAA,IAAeC,MAAf,mBAAeA,MAAf;;AACA,IAAMC,YAAY,GAAGF,KAArB;AACA,IAAMG,aAAa,GAAGF,MAAtB;;IAEMG,gB;;;;;;;WAIJ,cAAYJ,KAAZ,EAA2BC,MAA3B,EAA2C;MACzC,KAAKI,MAAL,GAAcH,YAAY,GAAGF,KAA7B;MACA,KAAKM,MAAL,GAAcH,aAAa,GAAGF,MAA9B;IACD;;;;;;AAPGG,gB,CACGC,M,GAAiB,G;AADpBD,gB,CAEGE,M,GAAkB,G;;AAFrBF,gB,CASGG,S,GAAY,UAACC,IAAD,EAAeC,KAAf,EAAiC;EAClD,IAAIL,gBAAgB,CAACE,MAAjB,IAA2BF,gBAAgB,CAACC,MAAhD,EAAwD;IACtD,IAAMK,OAAO,GACXD,KAAK,KAAK,QAAV,GACID,IAAI,GAAGJ,gBAAgB,CAACE,MAD5B,GAEIE,IAAI,GAAGJ,gBAAgB,CAACC,MAH9B;;IAIA,IAAIM,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;MACzB,OAAOC,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BN,OAA/B,CAAX,CAAP;IACD,CAFD,MAEO;MACL,OAAOG,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BN,OAA/B,CAAX,IAAsD,CAA7D;IACD;EACF;;EACD,OAAOF,IAAP;AACD,C;;AAtBGJ,gB,CAwBGa,Q,GAAW,UAACT,IAAD,EAAeC,KAAf,EAAiC;EACjD,IAAIL,gBAAgB,CAACE,MAAjB,IAA2BF,gBAAgB,CAACC,MAAhD,EAAwD;IACtD,IAAMK,OAAO,GACXD,KAAK,KAAK,QAAV,GACID,IAAI,GAAGJ,gBAAgB,CAACE,MAD5B,GAEIE,IAAI,GAAGJ,gBAAgB,CAACC,MAH9B;;IAIA,IAAIM,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;MACzB,OAAOC,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BN,OAA/B,CAAX,CAAP;IACD,CAFD,MAEO;MACL,OAAOG,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BN,OAA/B,CAAX,CAAP;IACD;EACF;;EACD,OAAOF,IAAP;AACD,C;;AAGH,eAAeJ,gBAAf"},"metadata":{},"sourceType":"module"}