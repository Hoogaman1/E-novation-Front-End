{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { createNavigator, SceneView, SwitchRouter } from 'react-navigation';\nimport { Transitioning, Transition } from 'react-native-reanimated';\nvar DEFAULT_TRANSITION = React.createElement(Transition.Together, null, React.createElement(Transition.Out, {\n  type: \"fade\",\n  durationMs: 200,\n  interpolation: \"easeIn\"\n}), React.createElement(Transition.In, {\n  type: \"fade\",\n  durationMs: 200\n}));\n\nvar AnimatedSwitchView = function (_React$Component) {\n  _inherits(AnimatedSwitchView, _React$Component);\n\n  var _super = _createSuper(AnimatedSwitchView);\n\n  function AnimatedSwitchView() {\n    var _this;\n\n    _classCallCheck(this, AnimatedSwitchView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"containerRef\", React.createRef());\n\n    return _this;\n  }\n\n  _createClass(AnimatedSwitchView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevState = prevProps.navigation.state;\n      var prevActiveKey = prevState.routes[prevState.index].key;\n      var state = this.props.navigation.state;\n      var activeKey = state.routes[state.index].key;\n\n      if (activeKey !== prevActiveKey && this.containerRef.current) {\n        this.containerRef.current.animateNextTransition();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          navigationConfig = _this$props.navigationConfig,\n          screenProps = _this$props.screenProps;\n      var state = this.props.navigation.state;\n      var activeKey = state.routes[state.index].key;\n      var descriptor = this.props.descriptors[activeKey];\n      var ChildComponent = descriptor.getComponent();\n      var transition = (navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.transition) || DEFAULT_TRANSITION;\n      var transitionViewStyle = (navigationConfig === null || navigationConfig === void 0 ? void 0 : navigationConfig.transitionViewStyle) || null;\n      return React.createElement(Transitioning.View, {\n        ref: this.containerRef,\n        transition: transition,\n        style: [styles.container, transitionViewStyle]\n      }, React.createElement(SceneView, {\n        component: ChildComponent,\n        navigation: descriptor.navigation,\n        screenProps: screenProps\n      }));\n    }\n  }]);\n\n  return AnimatedSwitchView;\n}(React.Component);\n\nexport default function createAnimatedSwitchNavigator(routeConfigMap) {\n  var switchConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var router = SwitchRouter(routeConfigMap, switchConfig);\n  var Navigator = createNavigator(AnimatedSwitchView, router, switchConfig);\n  return Navigator;\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["index.tsx"],"names":["DEFAULT_TRANSITION","React","componentDidUpdate","state","prevState","prevProps","prevActiveKey","activeKey","render","screenProps","descriptor","ChildComponent","transition","transitionViewStyle","styles","switchConfig","router","SwitchRouter","Navigator","createNavigator","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, ViewStyle } from 'react-native';\nimport {\n  createNavigator,\n  CreateNavigatorConfig,\n  NavigationDescriptor,\n  NavigationParams,\n  NavigationProp,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  NavigationScreenProp,\n  NavigationState,\n  NavigationSwitchProp,\n  NavigationSwitchRouterConfig,\n  SceneView,\n  SwitchRouter,\n  SupportedThemes,\n  NavigationScreenConfig,\n} from 'react-navigation';\nimport {\n  TransitioningView,\n  Transitioning,\n  Transition,\n} from 'react-native-reanimated';\n\nconst DEFAULT_TRANSITION = (\n  <Transition.Together>\n    <Transition.Out type=\"fade\" durationMs={200} interpolation=\"easeIn\" />\n    <Transition.In type=\"fade\" durationMs={200} />\n  </Transition.Together>\n);\n\ntype Props = {\n  navigationConfig: NavigationAnimatedSwitchConfig;\n  navigation: NavigationProp<NavigationState>;\n  descriptors: {\n    [key: string]: NavigationDescriptor<\n      NavigationParams,\n      NavigationAnimatedSwitchOptions,\n      NavigationSwitchProp<NavigationRoute, any>\n    >;\n  };\n  screenProps?: unknown;\n};\n\nclass AnimatedSwitchView extends React.Component<Props> {\n  componentDidUpdate(prevProps: Props) {\n    const { state: prevState } = prevProps.navigation;\n    const prevActiveKey = prevState.routes[prevState.index].key;\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n\n    if (activeKey !== prevActiveKey && this.containerRef.current) {\n      this.containerRef.current.animateNextTransition();\n    }\n  }\n\n  private containerRef = React.createRef<TransitioningView>();\n\n  render() {\n    const { navigationConfig, screenProps } = this.props;\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n    const descriptor = this.props.descriptors[activeKey];\n    const ChildComponent = descriptor.getComponent();\n\n    const transition = navigationConfig?.transition || DEFAULT_TRANSITION;\n    const transitionViewStyle = navigationConfig?.transitionViewStyle || null;\n\n    return (\n      <Transitioning.View\n        ref={this.containerRef}\n        transition={transition}\n        style={[styles.container, transitionViewStyle]}\n      >\n        <SceneView\n          component={ChildComponent}\n          navigation={descriptor.navigation}\n          screenProps={screenProps}\n        />\n      </Transitioning.View>\n    );\n  }\n}\n\nexport type NavigationAnimatedSwitchConfig = NavigationSwitchRouterConfig & {\n  transition?: React.ReactNode;\n  transitionViewStyle?: ViewStyle;\n};\n\nexport type NavigationAnimatedSwitchOptions = {};\n\nexport type NavigationAnimatedSwitchProp<\n  State = NavigationRoute,\n  Params = NavigationParams\n> = NavigationScreenProp<State, Params> & {\n  jumpTo: (routeName: string, key?: string) => void;\n};\n\nexport type NavigationAnimatedSwitchScreenProps<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = {\n  theme: SupportedThemes;\n  navigation: NavigationAnimatedSwitchProp<NavigationRoute, Params>;\n  screenProps: ScreenProps;\n};\n\nexport type NavigationAnimatedSwitchScreenComponent<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = React.ComponentType<\n  NavigationAnimatedSwitchScreenProps<Params, ScreenProps>\n> & {\n  navigationOptions?: NavigationScreenConfig<\n    NavigationAnimatedSwitchOptions,\n    NavigationAnimatedSwitchProp<NavigationRoute, Params>,\n    ScreenProps\n  >;\n};\n\nexport default function createAnimatedSwitchNavigator(\n  routeConfigMap: NavigationRouteConfigMap<{}, NavigationAnimatedSwitchProp>,\n  switchConfig: CreateNavigatorConfig<\n    NavigationAnimatedSwitchConfig,\n    NavigationSwitchRouterConfig,\n    NavigationAnimatedSwitchOptions,\n    NavigationAnimatedSwitchProp<NavigationRoute, any>\n  > = {}\n) {\n  const router = SwitchRouter(routeConfigMap, switchConfig);\n\n  // TODO: don't have time to fix it right now\n  // @ts-ignore\n  const Navigator = createNavigator(AnimatedSwitchView, router, switchConfig);\n\n  return Navigator;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}