{"version":3,"sources":["index.tsx"],"names":["VerticalSlider","React","Component","constructor","props","gestureState","min","max","step","height","ratio","dy","diff","Math","_moveStartValue","round","value","floor","ballIndicatorWidth","ballIndicatorHeight","renderIndicator","animationDuration","sliderHeight","_getSliderHeight","ballPosition","ballHeight","Animated","parallel","timing","state","toValue","easing","Easing","linear","duration","useNativeDriver","start","setState","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","_event","disabled","_fetchNewValueFromGesture","_changeState","onChange","onPanResponderRelease","onComplete","onPanResponderTerminationRequest","onPanResponderTerminate","Value","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","width","borderRadius","maximumTrackTintColor","minimumTrackTintColor","showBallIndicator","ballIndicatorColor","ballIndicatorPosition","ballIndicatorTextColor","showBackgroundShadow","shadowProps","shadowOffsetWidth","shadowOffsetHeight","shadowOpacity","shadowRadius","elevation","shadowColor","shadowStyles","shadowOffset","styles","container","backgroundColor","panHandlers","slider","ball","bottom","left","ballText","color","StyleSheet","position","alignItems","justifyContent","fontWeight","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Text,\n  Animated,\n  PanResponder,\n  StyleSheet,\n  Easing,\n  PanResponderInstance,\n  GestureResponderEvent,\n  PanResponderGestureState,\n} from 'react-native';\n\ninterface props {\n  value?: number;\n  disabled?: boolean;\n  min: number;\n  max: number;\n  onChange: (value: number) => void;\n  onComplete?: (value: number) => void;\n  width: number;\n  height: number;\n  borderRadius?: number;\n  maximumTrackTintColor?: string;\n  minimumTrackTintColor?: string;\n  showBallIndicator?: boolean;\n  step?: number;\n  ballIndicatorColor?: string;\n  ballIndicatorWidth?: number;\n  ballIndicatorHeight?: number;\n  ballIndicatorPosition?: number;\n  ballIndicatorTextColor?: string;\n  animationDuration?: number;\n  showBackgroundShadow?: boolean;\n  shadowProps?: {\n    shadowOffsetWidth?: number;\n    shadowOffsetHeight?: number;\n    shadowOpacity?: number;\n    shadowRadius?: number;\n    elevation?: number;\n    shadowColor?: string;\n  };\n  renderIndicator?: (value: number) => JSX.Element;\n}\n\ninterface state {\n  value: number;\n  sliderHeight: Animated.Value;\n  ballHeight: Animated.Value;\n  panResponder: PanResponderInstance;\n}\n\nexport default class VerticalSlider extends React.Component<props, state> {\n  _moveStartValue: number = 0;\n\n  constructor(props: props) {\n    super(props);\n\n    let panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponder: () => false,\n      onPanResponderGrant: () => {\n        this._moveStartValue = this.state.value;\n      },\n      onPanResponderMove: (\n        _event: GestureResponderEvent,\n        gestureState: PanResponderGestureState\n      ) => {\n        if (this.props.disabled) {\n          return;\n        }\n        const value = this._fetchNewValueFromGesture(gestureState);\n        this._changeState(value);\n        if (this.props.onChange) {\n          this.props.onChange(value);\n        }\n      },\n      onPanResponderRelease: (\n        _event: GestureResponderEvent,\n        gestureState: PanResponderGestureState\n      ) => {\n        if (this.props.disabled) {\n          return;\n        }\n        const value = this._fetchNewValueFromGesture(gestureState);\n        this._changeState(value);\n        if (this.props.onComplete) {\n          this.props.onComplete(value);\n        }\n      },\n      onPanResponderTerminationRequest: () => false,\n      onPanResponderTerminate: (\n        _event: GestureResponderEvent,\n        gestureState: PanResponderGestureState\n      ) => {\n        if (this.props.disabled) {\n          return;\n        }\n        const value = this._fetchNewValueFromGesture(gestureState);\n        this._changeState(value);\n        if (this.props.onComplete) {\n          this.props.onComplete(value);\n        }\n      },\n    });\n\n    this.state = {\n      value: props.value || props.min,\n      sliderHeight: new Animated.Value(0),\n      ballHeight: new Animated.Value(0),\n      panResponder,\n    };\n  }\n\n  _fetchNewValueFromGesture = (gestureState: any): number => {\n    const { min, max, step, height } = this.props;\n    const ratio = -gestureState.dy / height;\n    const diff = max - min;\n    if (step) {\n      return Math.max(\n        min,\n        Math.min(\n          max,\n          this._moveStartValue + Math.round((ratio * diff) / step) * step\n        )\n      );\n    }\n    let value = Math.max(min, this._moveStartValue + ratio * diff);\n    return Math.floor(value * 100) / 100;\n  };\n\n  _getSliderHeight = (value: number): number => {\n    const { min, max, height } = this.props;\n    return ((value - min) * height) / (max - min);\n  };\n\n  _changeState = (value: number): void => {\n    const {\n      height,\n      ballIndicatorWidth = 48,\n      ballIndicatorHeight = 48,\n      renderIndicator = null,\n      animationDuration,\n    } = this.props;\n    const sliderHeight = this._getSliderHeight(value);\n    let ballPosition = sliderHeight;\n    const ballHeight = renderIndicator\n      ? ballIndicatorHeight\n      : ballIndicatorWidth;\n    if (ballPosition + ballHeight >= height) {\n      ballPosition = height - ballHeight;\n    } else if (ballPosition - ballHeight <= 0) {\n      ballPosition = 0;\n    } else {\n      ballPosition = ballPosition - ballHeight / 2;\n    }\n    Animated.parallel([\n      Animated.timing(this.state.sliderHeight, {\n        toValue: sliderHeight,\n        easing: Easing.linear,\n        duration: animationDuration || 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.ballHeight, {\n        toValue: ballPosition,\n        easing: Easing.linear,\n        duration: animationDuration || 0,\n        useNativeDriver: false,\n      }),\n    ]).start();\n    this.setState({ value });\n  };\n\n  componentDidMount() {\n    const { value } = this.props;\n    if (value) {\n      this._changeState(value);\n    }\n  }\n\n  shouldComponentUpdate(nextProps: props, nextState: state) {\n    if (nextProps.value && nextProps.value !== nextState.value) {\n      this._changeState(nextProps.value);\n    }\n    return false;\n  }\n\n  render() {\n    const {\n      width = 350,\n      height = 30,\n      borderRadius = 5,\n      maximumTrackTintColor = '#3F2DA5',\n      minimumTrackTintColor = '#77ADE6',\n      showBallIndicator = false,\n      ballIndicatorColor = '#ECECEC',\n      ballIndicatorWidth = 48,\n      ballIndicatorHeight = 48,\n      ballIndicatorPosition = -60,\n      ballIndicatorTextColor = '#000000',\n      showBackgroundShadow = true,\n      shadowProps: {\n        shadowOffsetWidth = 0,\n        shadowOffsetHeight = 1,\n        shadowOpacity = 0.22,\n        shadowRadius = 2.22,\n        elevation = 3,\n        shadowColor = '#000',\n      } = {},\n      renderIndicator = null,\n    } = this.props;\n\n    const shadowStyles = {\n      shadowColor,\n      shadowOffset: {\n        width: shadowOffsetWidth,\n        height: shadowOffsetHeight,\n      },\n      shadowOpacity,\n      shadowRadius,\n      elevation,\n    };\n\n    const { value } = this.state;\n    return (\n      <View\n        style={[\n          showBackgroundShadow ? shadowStyles : {},\n          { height, width, borderRadius },\n        ]}\n      >\n        <View\n          style={[\n            styles.container,\n            {\n              height,\n              width,\n              borderRadius,\n              backgroundColor: maximumTrackTintColor,\n            },\n          ]}\n          {...this.state.panResponder.panHandlers}\n        >\n          <Animated.View\n            style={[\n              styles.slider,\n              {\n                height: this.state.sliderHeight,\n                width,\n                backgroundColor: minimumTrackTintColor,\n              },\n            ]}\n          />\n        </View>\n        {showBallIndicator ? (\n          <Animated.View\n            style={[\n              styles.ball,\n              showBackgroundShadow ? shadowStyles : {},\n              {\n                height: renderIndicator\n                  ? ballIndicatorHeight\n                  : ballIndicatorWidth,\n                bottom: this.state.ballHeight,\n                left: ballIndicatorPosition,\n                width: ballIndicatorWidth,\n              },\n              renderIndicator\n                ? {}\n                : {\n                    borderRadius: ballIndicatorWidth,\n                    backgroundColor: ballIndicatorColor,\n                  },\n            ]}\n          >\n            {renderIndicator ? (\n              renderIndicator(value)\n            ) : (\n              <Text\n                style={[\n                  styles.ballText,\n                  {\n                    color: ballIndicatorTextColor,\n                  },\n                ]}\n              >\n                {Math.round(value * 100) / 100}\n              </Text>\n            )}\n          </Animated.View>\n        ) : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  ball: {\n    position: 'absolute',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  ballText: {\n    fontWeight: '900',\n  },\n  container: {\n    overflow: 'hidden',\n  },\n  slider: {\n    position: 'absolute',\n    bottom: 0,\n  },\n});\n"]}